
	αλγοριθμος ψάξε 
	δεδομενα//π, τ//
	αν πρώτο(π) = τ τότε
		απ ← αληθής
	αλλιώς 
		απ ←  ψευδης
	τελος_αν
	αποτελεσματα //απ//
	τελος ψάξε

	αλγοριθμος πρώτο
	δεδομενα//π//
	απ ← π[1]
	αποτελεσματα //απ//
	τελος πρώτο


Αλγόριθμος ταδε
     Κάλεσε αλ(1, α)
Τέλος ταδε

Αλγόριθμος αλ
δεδομένα //α//
    β <- 1
αποτελέσματα //β//
τελος αλ

    Αλγόριθμος ταδε
         Κάλεσε αλ(α)
    Τέλος ταδε
    
    Αλγόριθμος αλ
    δεδομένα //α//
        α <- 1
    αποτελέσματα //α//
    τελος αλ

Αλγοριθμος ταδε
    α[1] <- 1
    γραψε α[1]
τελος ταδε

Αλγοριθμος ταδε
    α[1] <- 1
    β[1] <- 2
    γραψε α[2]
τελος ταδε
	
	Αλγόριθμος TestNum1
		num1 ← 3
		num ← int(num1)
		num ← abs(num)
		Κάλεσε CountDigits(num, Pin, N)
		Κάλεσε PrintArray(Pin, N, a)
	Τέλος TestNum1
	 
	Αλγόριθμος CountDigits  
	  Δεδομένα //a//  
	  ΓΙΑ i ΑΠΟ 1 ΜΕΧΡΙ 10
		P[i] ← -1
	  ΤΕΛΟΣ_ΕΠΑΝΑΛΗΨΗΣ
	  ΑΝ a <= 9 ΤΟΤΕ
		count ← 1
		P[1] ← a
	  ΑΛΛΙΩΣ
		count ← 1
		y ← a DIV 10
		ΟΣΟ y > 0 ΕΠΑΝΑΛΑΒΕ
		  count ← count + 1
		  y ← y DIV 10
		ΤΕΛΟΣ_ΕΠΑΝΑΛΗΨΗΣ
		P[1] ← a DIV 10^(count-1)
		k ← 2
		ΓΙΑ i ΑΠΟ count-1 ΜΕΧΡΙ 1 ΜΕ_ΒΗΜΑ -1
		  y ← (a MOD 10^i) DIV (10^(i-1))
		  P[k] ← y
		  k ← k + 1
		ΤΕΛΟΣ_ΕΠΑΝΑΛΗΨΗΣ
		ΓΡΑΨΕ 'Πλήθος ψηφίων αριθμού: ', count
	  ΤΕΛΟΣ_ΑΝ
	  Αποτελέσματα //P, count//
	ΤΕΛΟΣ CountDigits

	Αλγόριθμος PrintArray
	  Δεδομένα //P, count//
	  Για i από 1 μέχρι count
		Εμφάνισε P[i]
	  Τέλος_επανάληψης 
	  Αποτελέσματα //i//
	Τέλος PrintArray 

αλγοριθμος κύριος
	για ι από 1 μεχρι 10
		α[ι] ← ι
	τελος_επαναληψης

	γραψε ψάξε(α, 5)
	τελος κύριος

	αλγοριθμος ψάξε 
	δεδομενα//π, τ//
	αν πρώτο(π) = τ τότε
		απ ← αληθής
	αλλιώς 
		απ ← ψάξε(υπόλοιπα(π), τ)
	τελος_αν
	αποτελεσματα //απ//
	τελος ψάξε

	αλγοριθμος πρώτο
	δεδομενα//π//
	απ ← π[1]
	αποτελεσματα //απ//
	τελος πρώτο

	αλγοριθμος υπόλοιπα
	δεδομενα //π//
	απ ← κομματι(π, 2, μηκος(π, 1))
	αποτελεσματα //απ//
	τελος υπόλοιπα

	αλγοριθμος κομματι
	δεδομενα //π, αρ, τε//
	δ ← 0
	για ι απο αρ μεχρι τε
		δ ← δ + 1
		απ[δ] ← π[ι]
	τελος_επαναληψης

	αποτελεσματα //απ//
τελος κομματι
	

αλγοριθμος αρτιος
δεδομενα //ν//
	αν ν = 0 τότε
		απ ← αληθής
	αλλιώς
		απ ← περιττός(ν-1)
	τελος_αν
	αποτελεσματα //απ//
τελος αρτιος

αλγοριθμος περιττός
δεδομένα //ν//
	αν ν = 0 τότε
		απ ← ψευδης 
	αλλιώς
		απ ← αρτιος(ν-1)
	τελος_αν
αποτελέσματα //απ//
τελος περιττός

	αλγοριθμος κύριος
	για ι από 1 μεχρι 10
		α[ι] ← ι
	τελος_επαναληψης

	γραψε ψάξε(α, 5)
	τελος κύριος

	αλγοριθμος ψάξε 
	δεδομενα//π, τ//
	αν πρώτο(π) = τ τότε
		απ ← αληθής
	αλλιώς 
		απ ← ψάξε(υπόλοιπα(π), τ)
	τελος_αν
	αποτελεσματα //απ//
	τελος ψάξε

	αλγοριθμος πρώτο
	δεδομενα//π//
	απ ← π[1]
	αποτελεσματα //απ//
	τελος πρώτο

	αλγοριθμος υπόλοιπα
	δεδομενα //π//
	απ ← κομματι(π, 2, μηκος(π, 1))
	αποτελεσματα //απ//
	τελος υπόλοιπα

	αλγοριθμος κομματι
	δεδομενα //π, αρ, τε//
	δ ← 0
	για ι απο αρ μεχρι τε
		δ ← δ + 1
		απ[δ] ← π[ι]
	τελος_επαναληψης

	αποτελεσματα //απ//
	τελος κομματι

αλγοριθμος κύριος
για ι από 1 μεχρι 10
	α[ι] ← ι
τελος_επαναληψης

καλεσε ψάξε(α, 5, απ)
γραψε απ
τελος κύριος

αλγοριθμος ψάξε 
δεδομενα//π, τ//
Καλεσε διαδ(π, απ)
αποτελεσματα //απ//
τελος ψάξε


αλγοριθμος διαδ
δεδομενα //π//
αν π[1] = 1 τοτε
	απ ← αληθης
αλλιως
	απ ← ψευδης
τελος_αν
αποτελεσματα //απ//
τελος διαδ

	αλγοριθμος καλών
	  α ← φτιάξε() 
	  γραψε α[1]
	τελος καλών

	αλγοριθμος φτιάξε
	  α[1] ← 1
	  αποτελεσματα //α//
	τελος φτιάξε
	
αλγοριθμος καλών
  α <- φτιάξε()
  α <- α + 1
τελος καλών

αλγοριθμος φτιάξε
  α[1] <- 1
  αποτελεσματα //α//
τελος φτιάξε 


	Αλγοριθμος καλων
	Καλεσε δοκιμή(κ)
	τελος καλων

	Αλγόριθμος δοκιμή
	Για i από 1 μέχρι 5
		Για j απο 1 μεχρι 3
			Διάβασε α[i, j]
		Τέλος_επανάληψης 
	Τέλος_επανάληψης

	Αποτελέσματα //α//
	Τέλος δοκιμή

αλγοριθμος δοκιμη
α<-1
Αν α = 1 τότε γραψε 1
τελος δοκιμη


	αλγοριθμος δοκιμη
	διαβασε α
	Αν α = 1 τότε 
		γραψε 1
	αλλιώς_αν α = 2 τότε
		γράψε 2
	αλλιώς
		Επίλεξε α 
		    περίπτωση 5
		        γράψε 5
		    περίπτωση > 6, < 10
		        γράψε '<610'
		    περίπτωση 20..21
		        γράψε "20..21"
		    περίπτωση αλλιώς
		       γράψε α
	   Τέλος_επιλογών
	Τέλος_αν
	τελος δοκιμη



αλγοριθμος δοκιμη
    διαβασε α
    Για ι από 1 μέχρι 10 με_βήμα 2
       Για j από 1 μέχρι ι με_βήμα 0.5
           Γράψε j
       τέλος_επανάληψης
    τέλος_επανάληψης
τέλος δοκιμη



	Αλγόριθμος καλών
	  Γράψε fibonacci(5)
	Τέλος καλών

	Αλγόριθμος fibonacci
		Δεδομένα //ν//

		Αν ν < 2 τότε
		  απ ← ν
		αλλιώς
		  απ ← fibonacci(ν-1) + fibonacci(ν-2)
		τελος_αν
algParams
		Αποτελέσματα //απ//

	Τέλος fibonacci


αλγοριθμος καλων
	καλεσε ανοι(5, 1, 3)
τελος καλων

αλγοριθμος ανοι
	δεδομενα //n, i, j//
	αν n >= 1  τοτε
	 καλεσε ανοι (n - 1,i, 6 - (i + j) )
	 γραψε "μεταφορα του δισκου απο τον", i, "στον", j
	 καλεσε ανοι(n - 1, 6 - (i + j), j)
	τελος_αν
τελος ανοι

	αλγοριθμος μκδ
	δεδομενα //α, β//
	αν α mod β = 0 τοτε
		απ ← β
	αλλιως
		απ ← μκδ(β, α mod β)
	τελος_αν
	αποτελεσματα //απ//
	τελος μκδ

αλγοριθμος ταδε
	α <- μαξ(1,2)
γραψε α

τελος ταδε

αλγοριθμος μαξ
	δεδομενα //α, β//
	αν α > β τοτε
		μ ← α
	αλλιως
		μ ← β
	τελος_αν
	αποτελεσματα //μ//
τελος μαξ


	αλγοριθμος ταδε

		α ← 1
		β[1, 2] ← 2
		β[10, 2] ← 3

	αποτελεσματα //α, β//
	τελος ταδε



αλγοριθμος μεγ
δεδομενα//π//
	πλ ← μηκος(π, 1)
	μ ← π[1]
	για ι απο 2 μεχρι πλ
		μ ← μαξ(μ, π[ι])
	τελος_επαναληψης
αποτελεσματα //μ//
τελος μεγ

αλγοριθμος μαξ
δεδομενα //α, β//
	αν α > β τοτε
		μ ← α
	αλλιως
		μ ← β
	τελος_αν
αποτελεσματα //μ//
τελος μαξ


	αλγοριθμος ταδε
	δεδομενα //α//
		α[1] ← 2

	τελος ταδε


αλγοριθμος ταδε

	Για ι απο 1 μεχρι 15
		α[ι] ← στρ_ακ(τυχαιος() * 10)
	τελος_επαναληψης

	Γραψε "δωσε εναν αριθμο απο το 0 μεχρι και το 10"
	διαβασε αρ
	θ ← αναζητηση(α, αρ) 
	Αν θ > 0 τοτε
		Γραψε "υπαρχει στην θεση", θ
	αλλιως
		γραψε "δεν υπαρχει"
	τελος_αν

τελος ταδε

αλγοριθμος στρ_ακ
δεδομενα //αρ//
	ακ ← α_μ(αρ)
	αν αρ - ακ >= 0.5 τοτε
		αρ ← ακ + 1
	αλλιως 
		αρ ← ακ
	τελος_αν
αποτελεσματα //αρ//
τελος στρ_ακ


αλγοριθμος αναζητηση
δεδομενα//π, τ//
	μ ← μηκος(π, 1)
	βρ ← ψευδης
	ι ← 1
	θ ← 0
	Οσο οχι βρ και ι <= μ επαναλαβε
		αν π[ι] = τ τοτε
			θ ← ι
		τελος_αν
		ι ← ι + 1
	τελος_επαναληψης
αποτελεσματα //θ//
τελος αναζητηση




	αλγοριθμος ταδε
		για ι απο 1 μεχρι 10
			α[ι] ← τυχαιος()
		τελος_επαναληψης

		αν ταξινομημενος(α) τοτε
			γραψε 'ειναι'
		αλλιως 
			γραψε 'δεν ειναι'
		τελος_αν
	τελος ταδε

	αλγοριθμος ταξινομημενος
	δεδομενα//π//

		πλ ← μηκος(π, 1)

		απ ← αληθης
		ι ← 1
		Οσο απ και ι < πλ επαναλαβε
			αν π[ι] > π[ι + 1] τοτε
				απ ← ψευδης
			τελος_αν
			ι <- ι + 1
		Τελος_επαναληψης

	Αποτελεσματα//απ//
	τελος ταξινομημενος




αλγοριθμος κυριος
	γραψε παραγοντικο(5)
τελος κυριος


αλγοριθμος παραγοντικο
δεδομενα //ν//

αν ν = 1 τότε
   απ <- 1
αλλιως
   απ <- ν * παραγοντικο(ν-1)
τελος_αν


αποτελεσματα //απ//
τελος παραγοντικο

	αλγοριθμος ταδε
		διαβασε α, β, γ, δ
		γραψε α, β, γ, δ
	τελος ταδε

αλγοριθμος κυριος
	γραψε κανε(5)
τελος κυριος


αλγοριθμος κανε
δεδομενα //ν//
	αν ν = 1 τότε
	   απ <- 1
	αλλιως
	   απ <- 1 + κανε(ν-1)
	τελος_αν
αποτελεσματα //απ//
τελος κανε

	αλγοριθμος ταδε
		για ι απο 1 μεχρι 10
			εμφανισε ι
		τελος_Επαναληψης
	τελος ταδε

αλγοριθμος ταδε
	α[1]← 1
	α[2]← 2
	α[2]← 3
τελος ταδε

	αλγοριθμος δοκιμη
		για ι απο 1 μεχρι 5
			γραψε ι
			καλεσε δοκιμη()
		τελος_επαναληψης
	τελος δοκιμη

αλγοριθμος ταδε

	α[1] <- 4
	α[2] <- 3
	α[3] <- 5
	α[4] <- 2
	α[5] <- 6
	καλεσε ταξ(α)
	για ι απο 1 μεχρι 5
		εμφανισε α[ι]
	τελος_επαναληψης
τελος ταδε

αλγοριθμος ταξ
δεδομενα//π//

για ι απο 2 μεχρι 5
     για ξ απο 5 μεχρι ι με_βημα -1
         αν π[ξ-1] > π[ξ] τοτε
             αντιμεταθεσε π[ξ], π[ξ-1]
         τελος_αν
     τελος_επαναληψης
 τελος_επαναληψης
 
αποτελεσματα //π// 
τελος ταξ
 
	αλγοριθμος ταδε
		α[3] <-1
		α[1] <-2
		γραψε μηκος(α, 1)
	τελος ταδε


αλγοριθμος ταδε
	α[3, 1] ← 1
	α[1, 45] ← 2
	γραψε μηκος(α, 1)
τελος ταδε




	αλγοριθμος ταδε
		a← 1
		γραψε μηκος(a, 1)	 
	 τελος ταδε
 

 αλγοριθμος ταδε

α[1] ← 1
καλεσε τ(α)
τελος ταδε


αλγοριθμος τ
δεδομενα //α//
γραψε τυπος("α")
τελος τ


	αλγοριθμος ταδε

	α[1] ← στρ_ακ(τυχαιος())
		καλεσε αναζητηση(α) 

	τελος ταδε


	αλγοριθμος αναζητηση
	δεδομενα//π//
		γραψε τυπος("π")


	τελος αναζητηση

	αλγοριθμος στρ_ακ
	δεδομενα //αρ//
		ακ ← α_μ(αρ)
		αν αρ - ακ >= 0.5 τοτε
			
		τελος_αν
		γραψε τυπος("αρ")
	αποτελεσματα //αρ//
	τελος στρ_ακ