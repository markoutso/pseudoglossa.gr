<?xml version="1.0" encoding="utf-8"?>
<CodeArea xmlns="pseudoglossa.components.*" decoration="false" xmlns:mx="http://www.adobe.com/2006/mxml" implements="pseudoglossa.IInput">
<mx:Script>
	<![CDATA[
		import mx.managers.PopUpManager;
		
		import pseudoglossa.ArrayStruct;
		import pseudoglossa.DataStatement;
		import pseudoglossa.Environment;
		import pseudoglossa.Helper;
		import pseudoglossa.LValue;
		import pseudoglossa.PRuntimeError;
		import pseudoglossa.ReadStatement;
		import pseudoglossa.Statement;
		import pseudoglossa.Variable;
	
	private var pos:int = -1;
	private var value:String;
	
	public function read(callback:Function):void
	{
		callback(readValue());
	}
	public function inputLog():String 
	{
		return this.textArea.text;
	}
	private function readValue():String 
	{
		pos += 1;
		if(textArea && pos < textArea.tf.numLines) {
			value = Helper.trim(textArea.tf.getLineText(pos))
		}
		else {
			throw new PRuntimeError(PRuntimeError.END_OF_INPUT_FILE);
		}
		return value;
		
	}
	public function stop():void
	{
		pos = -1;
		
	}
	public function inputArrayFromData(dataStatement:DataStatement, ars:ArrayStruct, dims:Array):void 
	{		
	}
	public function inputData(callback:Function, lv:LValue):void
	{
		if(lv is ArrayStruct) {
			var arr:ArrayStruct = lv as ArrayStruct;
			var val:String = readValue();
			var dimtext:Array = val.replace('[', '').replace(']', '').split(','),
				dim:Array;
			if(dimtext.length != arr.dimension) {
				env.handleRuntimeError(new PRuntimeError(PRuntimeError.ARRAY_DIMENSION_ERROR), arr.line);
				return;
			}
			dim = dimtext.map(function(el:String, ...args):Number {
				var n:Number = Number(el);
				if(isFinite(n) && !isNaN(n)) {
					if(n == 0) {
						env.handleRuntimeError(new PRuntimeError(PRuntimeError.ARRAY_INDEX_ERROR), arr.line);
						return -1;
					}
					return n;
				} else {
					env.handleRuntimeError(new PRuntimeError(PRuntimeError.ARRAY_INDEX_ERROR), arr.line);
					return -1;
				}
			});
			
			var o:Object = {},
				count:uint, 
				pos:Array,
				i:uint;
			count = ArrayStruct.flattenDim(dim, dim);			
			for(i = 0; i < count; i += 1) {
				pos = ArrayStruct.restorePos(dim, i + 1);
				o['[' + pos.join(',') + ']'] = readValue();
			}
			callback(o);
		} else {
			callback(readValue());
		}
	}
	]]>
</mx:Script>
</CodeArea>
